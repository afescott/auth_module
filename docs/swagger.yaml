openapi: 3.0.3
info:
  title: Shopify Margin Cost Dashboard API
  description: |
    API for managing products, orders, and inventory for Shopify merchants.
    
    **Prerequisites:**
    - All products require a valid `merchant_id` that exists in the `merchants` table
    - Use the test merchant: `123e4567-e89b-12d3-a456-426614174001` (Test Shop)
    
    **Database Setup:**
    Run migrations before using the API:
    ```bash
    cargo run  # Migrations run automatically on startup
    ```
  version: 0.1.0
  contact:
    name: API Support
servers:
  - url: http://localhost:8080/api/v1
    description: Local development server

tags:
  - name: Products
    description: Product management endpoints
  - name: Orders
    description: Order management endpoints
  - name: Inventory
    description: Inventory item management endpoints

paths:
  /products:
    get:
      tags:
        - Products
      summary: List all products
      description: Retrieve a paginated list of products for a specific merchant
      operationId: listProducts
      parameters:
        - name: merchant_id
          in: query
          required: true
          description: UUID of the merchant
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        - name: product_type
          in: query
          required: false
          description: Filter by product type
          schema:
            type: string
          example: "Electronics"
        - name: status
          in: query
          required: false
          description: Filter by product status
          schema:
            type: string
          example: "active"
        - name: limit
          in: query
          required: false
          description: Maximum number of products to return (max 100)
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
          example: 20
        - name: offset
          in: query
          required: false
          description: Number of products to skip for pagination
          schema:
            type: integer
            default: 0
            minimum: 0
          example: 0
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '400':
          description: Bad request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - Products
      summary: Create a new product
      description: Create a new product for a merchant
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request - Validation error or product already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get a product by ID
      description: Retrieve a specific product with its variants
      operationId: getProduct
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the product
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductWithVariants'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - Products
      summary: Update a product
      description: Update an existing product's information
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the product
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - Products
      summary: Delete a product
      description: Soft delete a product (sets deleted_at timestamp)
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the product
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    get:
      tags:
        - Orders
      summary: List all orders
      description: Retrieve a paginated list of orders for a specific merchant
      operationId: listOrders
      parameters:
        - name: merchant_id
          in: query
          required: true
          description: UUID of the merchant
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174001"
        - name: financial_status
          in: query
          required: false
          description: Filter by financial status (paid, pending, refunded, etc.)
          schema:
            type: string
          example: "paid"
        - name: limit
          in: query
          required: false
          description: Maximum number of orders to return (max 100)
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
          example: 20
        - name: offset
          in: query
          required: false
          description: Number of orders to skip for pagination
          schema:
            type: integer
            default: 0
            minimum: 0
          example: 0
      responses:
        '200':
          description: List of orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '400':
          description: Bad request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - Orders
      summary: Create a new order
      description: Create a new order for a merchant
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '200':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request - Validation error or order already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get an order by ID
      description: Retrieve a specific order
      operationId: getOrder
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the order
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - Orders
      summary: Update an order
      description: Update an existing order's information
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the order
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - Orders
      summary: Delete an order
      description: Permanently delete an order
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the order
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /inventory:
    get:
      tags:
        - Inventory
      summary: List all inventory items
      description: Retrieve a paginated list of inventory items for a specific merchant
      operationId: listInventoryItems
      parameters:
        - name: merchant_id
          in: query
          required: true
          description: UUID of the merchant
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174001"
        - name: limit
          in: query
          required: false
          description: Maximum number of items to return (max 100)
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
          example: 20
        - name: offset
          in: query
          required: false
          description: Number of items to skip for pagination
          schema:
            type: integer
            default: 0
            minimum: 0
          example: 0
      responses:
        '200':
          description: List of inventory items retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItemListResponse'
        '400':
          description: Bad request - Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      tags:
        - Inventory
      summary: Create a new inventory item
      description: Create a new inventory item for a merchant
      operationId: createInventoryItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInventoryItemRequest'
      responses:
        '200':
          description: Inventory item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '400':
          description: Bad request - Validation error or item already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /inventory/{id}:
    get:
      tags:
        - Inventory
      summary: Get an inventory item by ID
      description: Retrieve a specific inventory item
      operationId: getInventoryItem
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the inventory item
          schema:
            type: string
            format: uuid
          example: "223e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Inventory item retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '404':
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - Inventory
      summary: Update an inventory item
      description: Update an existing inventory item's information
      operationId: updateInventoryItem
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the inventory item
          schema:
            type: string
            format: uuid
          example: "223e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInventoryItemRequest'
      responses:
        '200':
          description: Inventory item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '404':
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      tags:
        - Inventory
      summary: Delete an inventory item
      description: Permanently delete an inventory item
      operationId: deleteInventoryItem
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the inventory item
          schema:
            type: string
            format: uuid
          example: "223e4567-e89b-12d3-a456-426614174000"
      responses:
        '204':
          description: Inventory item deleted successfully
        '404':
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - merchant_id
        - shopify_product_id
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the product
          example: "123e4567-e89b-12d3-a456-426614174000"
        merchant_id:
          type: string
          format: uuid
          description: UUID of the merchant who owns this product
          example: "123e4567-e89b-12d3-a456-426614174001"
        shopify_product_id:
          type: integer
          format: int64
          description: Shopify product ID
          example: 7890123456789
        title:
          type: string
          nullable: true
          description: Product title
          example: "Wireless Bluetooth Headphones"
        product_type:
          type: string
          nullable: true
          description: Type/category of the product
          example: "Electronics"
        status:
          type: string
          nullable: true
          description: Current status of the product
          example: "active"
        created_at:
          type: string
          format: date-time
          description: Timestamp when the product was created
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the product was last updated
          example: "2024-01-20T14:45:00Z"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the product was soft deleted (null if not deleted)
          example: null

    Variant:
      type: object
      required:
        - id
        - merchant_id
        - shopify_variant_id
        - shopify_product_id
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the variant
          example: "223e4567-e89b-12d3-a456-426614174000"
        merchant_id:
          type: string
          format: uuid
          description: UUID of the merchant who owns this variant
          example: "123e4567-e89b-12d3-a456-426614174001"
        shopify_variant_id:
          type: integer
          format: int64
          description: Shopify variant ID
          example: 9876543210987
        shopify_product_id:
          type: integer
          format: int64
          description: Shopify product ID this variant belongs to
          example: 7890123456789
        sku:
          type: string
          nullable: true
          description: Stock keeping unit
          example: "WBH-BLK-001"
        title:
          type: string
          nullable: true
          description: Variant title
          example: "Black / Medium"
        barcode:
          type: string
          nullable: true
          description: Product barcode
          example: "1234567890123"
        weight:
          type: number
          format: double
          nullable: true
          description: Weight of the variant
          example: 0.5
        weight_unit:
          type: string
          nullable: true
          description: Unit of weight measurement
          example: "kg"
        created_at:
          type: string
          format: date-time
          description: Timestamp when the variant was created
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the variant was last updated
          example: "2024-01-20T14:45:00Z"

    ProductWithVariants:
      type: object
      required:
        - id
        - merchant_id
        - shopify_product_id
        - created_at
        - updated_at
        - variants
        - variant_count
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the product
        merchant_id:
          type: string
          format: uuid
          description: UUID of the merchant who owns this product
        shopify_product_id:
          type: integer
          format: int64
          description: Shopify product ID
        title:
          type: string
          nullable: true
          description: Product title
        product_type:
          type: string
          nullable: true
          description: Type/category of the product
        status:
          type: string
          nullable: true
          description: Current status of the product
        created_at:
          type: string
          format: date-time
          description: Timestamp when the product was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the product was last updated
        deleted_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the product was soft deleted
        variants:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
          description: List of product variants
        variant_count:
          type: integer
          format: int64
          description: Total number of variants for this product

    CreateProductRequest:
      type: object
      required:
        - merchant_id
        - shopify_product_id
      properties:
        merchant_id:
          type: string
          format: uuid
          description: |
            UUID of the merchant creating the product.
            **Must exist in the merchants table.**
            Use test merchant: 123e4567-e89b-12d3-a456-426614174001
          example: "123e4567-e89b-12d3-a456-426614174001"
        shopify_product_id:
          type: integer
          format: int64
          description: Shopify product ID
          example: 7890123456789
        title:
          type: string
          nullable: true
          description: Product title
          example: "Wireless Bluetooth Headphones"
        product_type:
          type: string
          nullable: true
          description: Type/category of the product
          example: "Electronics"
        status:
          type: string
          nullable: true
          description: Initial status of the product
          example: "active"

    UpdateProductRequest:
      type: object
      properties:
        title:
          type: string
          nullable: true
          description: Updated product title
          example: "Premium Wireless Bluetooth Headphones"
        product_type:
          type: string
          nullable: true
          description: Updated product type
          example: "Audio Equipment"
        status:
          type: string
          nullable: true
          description: Updated product status
          example: "draft"

    ProductListResponse:
      type: object
      required:
        - products
        - total
        - limit
        - offset
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductWithVariants'
          description: List of products with their variants
        total:
          type: integer
          format: int64
          description: Total number of products matching the query
          example: 150
        limit:
          type: integer
          description: Maximum number of products returned
          example: 50
        offset:
          type: integer
          description: Number of products skipped
          example: 0

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type
          example: "Validation error"
        message:
          type: string
          description: Detailed error message
          example: "Product already exists"

    # Orders
    Order:
      type: object
      required:
        - id
        - merchant_id
        - shopify_order_id
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the order
          example: 1
        merchant_id:
          type: string
          format: uuid
          description: UUID of the merchant who owns this order
          example: "123e4567-e89b-12d3-a456-426614174001"
        shopify_order_id:
          type: integer
          format: int64
          description: Shopify order ID
          example: 5678901234567
        name:
          type: string
          nullable: true
          description: Order name/number
          example: "#1001"
        processed_at:
          type: string
          format: date-time
          nullable: true
          description: When the order was processed
          example: "2024-01-15T10:30:00Z"
        currency:
          type: string
          nullable: true
          description: Currency code
          example: "USD"
        subtotal_price:
          type: number
          format: decimal
          nullable: true
          description: Subtotal price before discounts and shipping
          example: 99.99
        total_price:
          type: number
          format: decimal
          nullable: true
          description: Total price including everything
          example: 109.98
        total_discounts:
          type: number
          format: decimal
          nullable: true
          description: Total discounts applied
          example: 10.00
        total_shipping_price_set_amount:
          type: number
          format: decimal
          nullable: true
          description: Total shipping cost
          example: 9.99
        total_tax:
          type: number
          format: decimal
          nullable: true
          description: Total tax amount
          example: 10.00
        financial_status:
          type: string
          nullable: true
          description: Financial status (paid, pending, refunded, etc.)
          example: "paid"
        cancelled_at:
          type: string
          format: date-time
          nullable: true
          description: When the order was cancelled (null if not cancelled)
          example: null
        created_at:
          type: string
          format: date-time
          description: Timestamp when the order was created
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the order was last updated
          example: "2024-01-20T14:45:00Z"

    CreateOrderRequest:
      type: object
      required:
        - merchant_id
        - shopify_order_id
      properties:
        merchant_id:
          type: string
          format: uuid
          description: |
            UUID of the merchant creating the order.
            **Must exist in the merchants table.**
            Use test merchant: 123e4567-e89b-12d3-a456-426614174001
          example: "123e4567-e89b-12d3-a456-426614174001"
        shopify_order_id:
          type: integer
          format: int64
          description: Shopify order ID
          example: 5678901234567
        name:
          type: string
          nullable: true
          description: Order name/number
          example: "#1001"
        processed_at:
          type: string
          format: date-time
          nullable: true
          description: When the order was processed
          example: "2024-01-15T10:30:00Z"
        currency:
          type: string
          nullable: true
          description: Currency code
          example: "USD"
        subtotal_price:
          type: number
          format: decimal
          nullable: true
          description: Subtotal price
          example: 99.99
        total_price:
          type: number
          format: decimal
          nullable: true
          description: Total price
          example: 109.98
        total_discounts:
          type: number
          format: decimal
          nullable: true
          description: Total discounts
          example: 10.00
        total_shipping_price_set_amount:
          type: number
          format: decimal
          nullable: true
          description: Total shipping cost
          example: 9.99
        total_tax:
          type: number
          format: decimal
          nullable: true
          description: Total tax
          example: 10.00
        financial_status:
          type: string
          nullable: true
          description: Financial status
          example: "paid"

    UpdateOrderRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
          description: Updated order name
          example: "#1001-UPDATED"
        financial_status:
          type: string
          nullable: true
          description: Updated financial status
          example: "refunded"
        cancelled_at:
          type: string
          format: date-time
          nullable: true
          description: Set cancellation timestamp
          example: "2024-01-22T10:00:00Z"

    OrderListResponse:
      type: object
      required:
        - orders
        - total
        - limit
        - offset
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
          description: List of orders
        total:
          type: integer
          format: int64
          description: Total number of orders matching the query
          example: 250
        limit:
          type: integer
          description: Maximum number of orders returned
          example: 50
        offset:
          type: integer
          description: Number of orders skipped
          example: 0

    # Inventory Items
    InventoryItem:
      type: object
      required:
        - id
        - merchant_id
        - shopify_inventory_item_id
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the inventory item
          example: "323e4567-e89b-12d3-a456-426614174000"
        merchant_id:
          type: string
          format: uuid
          description: UUID of the merchant who owns this item
          example: "123e4567-e89b-12d3-a456-426614174001"
        shopify_inventory_item_id:
          type: integer
          format: int64
          description: Shopify inventory item ID
          example: 4567890123456
        shopify_variant_id:
          type: integer
          format: int64
          nullable: true
          description: Associated Shopify variant ID
          example: 9876543210987
        created_at:
          type: string
          format: date-time
          description: Timestamp when the item was created
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the item was last updated
          example: "2024-01-20T14:45:00Z"

    CreateInventoryItemRequest:
      type: object
      required:
        - merchant_id
        - shopify_inventory_item_id
      properties:
        merchant_id:
          type: string
          format: uuid
          description: |
            UUID of the merchant creating the item.
            **Must exist in the merchants table.**
            Use test merchant: 123e4567-e89b-12d3-a456-426614174001
          example: "123e4567-e89b-12d3-a456-426614174001"
        shopify_inventory_item_id:
          type: integer
          format: int64
          description: Shopify inventory item ID
          example: 4567890123456
        shopify_variant_id:
          type: integer
          format: int64
          nullable: true
          description: Associated Shopify variant ID
          example: 9876543210987

    UpdateInventoryItemRequest:
      type: object
      properties:
        shopify_variant_id:
          type: integer
          format: int64
          nullable: true
          description: Updated Shopify variant ID
          example: 9876543210988

    InventoryItemListResponse:
      type: object
      required:
        - items
        - total
        - limit
        - offset
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/InventoryItem'
          description: List of inventory items
        total:
          type: integer
          format: int64
          description: Total number of items matching the query
          example: 500
        limit:
          type: integer
          description: Maximum number of items returned
          example: 50
        offset:
          type: integer
          description: Number of items skipped
          example: 0

